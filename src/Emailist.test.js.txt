import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Emailist from './Emailist';
import { db } from './firebase';

jest.mock('./firebase'); // Mock the firebase module to prevent actual database calls

describe('Emailist Component', () => {
  test('renders Emailist component', async () => {
    render(<Emailist />);
    // You can add more specific tests based on your component's structure
    expect(screen.getByText('Loading...')).toBeInTheDocument();

    // You might want to use waitFor if your component relies on asynchronous data fetching
    // For example, if your component initially shows a loading state until data is loaded
    await waitFor(() => screen.getByText('Emailist Setting')); // Adjust the text based on your actual rendering
    expect(screen.getByText('Emailist Setting')).toBeInTheDocument();
  });

  test('renders emails', async () => {
    const mockSnapshot = {
      docs: [
        {
          id: '1',
          data: {
            to: 'example@example.com',
            subject: 'Test Subject',
            message: 'Test Message',
            timestamp: { seconds: 1637037600 }, // Adjust the timestamp based on your needs
          },
        },
      ],
    };

    // Mock the onSnapshot function to return the mockSnapshot
    db.collection.mockReturnValue({
      orderBy: jest.fn().mockReturnThis(),
      onSnapshot: jest.fn().mockImplementationOnce((success) => success(mockSnapshot)),
    });

    render(<Emailist />);
    await waitFor(() => screen.getByText('Emailist Setting')); // Wait for the component to render

    expect(screen.getByText('example@example.com')).toBeInTheDocument();
    expect(screen.getByText('Test Subject')).toBeInTheDocument();
    expect(screen.getByText('Test Message')).toBeInTheDocument();
  });

  // Add more tests as needed
});
